# Summary of Findings
# The source data contains errors that are causing exceptions to be thrown when
# calculating additional fields. Most of the errors occur with the start and end
# dates of the rentals. In some cases, the start date is after the end date.
# This creates an issue because it has a negative duration used in calculations
# such as the square root which create non-real values and cause math domain error
# exceptions to be thrown. Additionally, some of the rental end dates where missing
# which causes issues for downstream calculatios such as ZeroDivisionError.

PS C:\Users\chris\documents\PY220_Git\SP_Python220B_2019\students\chris_lombardi\lesson02\assignment\code> python -m pdb charges_calc.py -i source.json -o out.json
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8
  9     def parse_cmd_arguments():
 10         parser = argparse.ArgumentParser(description='Process some integers.')
 11         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 12         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 13
 14         return parser.parse_args()
 15
 16
 17     def load_rentals_file(filename):
 18         with open(filename) as file:
 19             try:
 20                 data = json.load(file)
 21             except:
 22                 exit(0)
 23         return data
 24
 25     def calculate_additional_fields(data):
 26         for value in data.values():
 27             try:
 28                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30                 value['total_days'] = (rental_end - rental_start).days
 31                 value['total_price'] = value['total_days'] * value['price_per_day']
 32                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33                 value['unit_cost'] = value['total_price'] / value['units_rented']
 34             except:
 35                 exit(0)
 36
 37         return data
 38
 39     def save_to_json(filename, data):
 40         with open(filename, 'w') as file:
 41             json.dump(data, file)
 42
 43     if __name__ == "__main__":
 44         args = parse_cmd_arguments()
 45         data = load_rentals_file(args.input)
 46         data = calculate_additional_fields(data)
 47         save_to_json(args.output, data)
(Pdb) b 46
Breakpoint 1 at c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py:46
(Pdb) continue
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(46)<module>()
-> data = calculate_additional_fields(data)
(Pdb) s
--Call--
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(25)calculate_additional_fields()
-> def calculate_additional_fields(data):
(Pdb) n
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(26)calculate_additional_fields()
-> for value in data.values():
(Pdb) n
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(27)calculate_additional_fields()
-> try:
(Pdb) n
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(28)calculate_additional_fields()
-> rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
(Pdb) n
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(29)calculate_additional_fields()
-> rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
(Pdb) pp rental_start
datetime.datetime(2017, 6, 12, 0, 0)
(Pdb) n
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(30)calculate_additional_fields()
-> value['total_days'] = (rental_end - rental_start).days
(Pdb) pp rental_end
datetime.datetime(2017, 3, 22, 0, 0)
(Pdb) n
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(31)calculate_additional_fields()
-> value['total_price'] = value['total_days'] * value['price_per_day']
(Pdb) pp value.get('total_days')
-82
(Pdb) n
> c:\users\chris\documents\py220_git\sp_python220b_2019\students\chris_lombardi\lesson02\assignment\code\charges_calc.py(32)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) pp value.get(total_price)
*** NameError: name 'total_price' is not defined
(Pdb) pp value.get('total_price')
-2542

# Identified that some of the data had rental end dates that occurred before the rental start date.
# Rerun debugging with the condition in the calculate_additional_fields method
# to verify that the start date came after the beginning date, which would produce a negative total cost
# and raise an exception when the square root is taken.

